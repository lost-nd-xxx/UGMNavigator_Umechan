// あやりりすEX　ゴーストテンプレート
// 種々のイベント辞書
//******************************************************************************

//------------------------------------------------------------------------------
// ユーザ入力後の反応
//------------------------------------------------------------------------------

OnUserInput
{
	if ISFUNC(reference[0]) == 1 {
		'\C\![quicksection,1]\1\c\0\c'
		--
		EVAL(reference[0])
	}
}

//------------------------------------------------------------------------------
// 選択肢決定後にちらつかないようにする
//------------------------------------------------------------------------------

OnChoiceSelectEx
{
	if ISFUNC(reference[1]) == 1 {
		'\C\![quicksection,1]\1\c\0\c'
		--
		EVAL(reference[1])
	}
}

//------------------------------------------------------------------------------
// バルーンのツールチップ
//------------------------------------------------------------------------------

On_balloon_tooltip
{
	_func = reference[1] + '_tooltip'
	if ISFUNC(_func) == 1 {
		EVAL(_func)
	}
}

//------------------------------------------------------------------------------
// UGMの存在
//------------------------------------------------------------------------------

isUgm
{
	プラグインの存在('6f0415e0-3c00-11ef-9a9c-0800200c9a66')
}

//------------------------------------------------------------------------------
// バルーン最下行
//------------------------------------------------------------------------------

OnBalloonInfoRequest
{
	'\0\b[2]\__w[1]\![get,property,OnBalloonInfoResponce,currentghost.balloon.scope(0).lines.initial,currentghost.balloon.scope(0).validwidth.initial,currentghost.balloon.scope(0).char_width]'
}

OnBalloonInfoResponce
{
	BalloonLines = TOINT(reference[0])
	BalloonValidWidth = TOINT(reference[1])
	BalloonCharWidth = TOINT(reference[2])
	// ピッタリすぎると溢れる場合があるので引いておく
	BalloonCharCnt = (BalloonValidWidth / BalloonCharWidth) - 2
}

//******************************************************************************
//時報
//******************************************************************************

// 時報0時
// 時報15時

//******************************************************************************
//キー入力
//******************************************************************************

//ランダムトーク
キー入力T
{
	'\![raise,OnAiTalk]'
}

//SHIORiリロード
キー入力R
{
	'\![reload,shiori](RELOAD SHIORI)'
}

//メニュー
キー入力M
{
	if ISFUNC('OnMenu') {
		OnMenu
	}
	else {
		'\![raise,OnMouseDoubleClick,0,0,0,0,__SYSTEM_KEYDOWN_COL,0,mouse]'
	}
}

//******************************************************************************
//見切れ
//******************************************************************************

// 見切れ0
// 見切れ解除0

//******************************************************************************
//サーフィス復元
//******************************************************************************

//------------------------------------------------------------------------------
// OnSurfaceRestoreイベント(ここは書き換えなくて構いません)
// 一定時間経った後、0番10番以外に戻したい場合は、\s[0] \s[10]の数字部を
// 書き換えてください。
//------------------------------------------------------------------------------
OnSurfaceRestore
{
	'\0\s[0]\1\s[10]\e'
}

//******************************************************************************
//シェル切り替え
//******************************************************************************

//------------------------------------------------------------------------------
//シェルチェンジ開始
//------------------------------------------------------------------------------

//シェル変更前・後
//シェル再読み込み前・後
//シェル(名前)変更前・後

//******************************************************************************
//インストール関連
//******************************************************************************

//------------------------------------------------------------------------------
//インストール中のメッセージ
//------------------------------------------------------------------------------
OnInstallBegin
{
	<<"
	い：インストール中です...
	">>
}

//------------------------------------------------------------------------------
//インストール完了メッセージ
//------------------------------------------------------------------------------
OnInstallComplete
{
	reference[0] = SPLIT(reference[0], ' with', 2)[0] //hogehoge with hemohemo
	ref_id = ''
	if reference[0] == 'shell' {
		ref_id = 'shell'
	}
	elseif reference[0] == 'ghost' {
		ref_id = 'ghost'
	}
	elseif reference[0] == 'balloon' {
		ref_id = 'balloon'
	}

	<<"
	い【R0 == 'shell'】：シェル、
	い【R0 == 'ghost'】：ゴースト、
	い【R0 == 'balloon'】：バルーン、
	い【R0 == 'plugin'】：プラグイン、
	い【それ以外】：なんだかわからないもの、
	改無い：「%(SHIORI3FW.EscapeDangerousTags(reference[1]))」、インストール完了です。
	い【STRLEN(ref_id) > 0】：切り替えますか？
	＠メニュー【直前】：切り替える｜OnAYATEMPLATE.InstallChange｜%(ref_id)
	＠メニュー【直前】：切り替えない｜Menu_CANCEL
	">>
}

OnAYATEMPLATE.InstallChange
{
	<<"
	い：では、しばらくお待ちください...\![change,%(reference[0]),lastinstalled]
	">>
}

//------------------------------------------------------------------------------
//インストール失敗メッセージ
//------------------------------------------------------------------------------
OnInstallFailure
{
	<<"
	い：インストールに失敗しました。
	い：理由は「%(reference[0])」だそうです。
	">>
}

//------------------------------------------------------------------------------
//インストール拒否（他のゴーストのためのアーカイブだった）
//------------------------------------------------------------------------------
OnInstallRefuse
{
	<<"
	い：これは「%(SHIORI3FW.EscapeDangerousTags(reference[0]))」用のアーカイブだそうです。
	い：処理を中断します。
	">>
}

//******************************************************************************
//メールチェック
//******************************************************************************

//------------------------------------------------------------------------------
//メールチェック開始
//------------------------------------------------------------------------------

OnBIFFBegin
{
	<<"
	い：メールチェックします。
	い：(UGMとは関係ありません)
	">>
}

//------------------------------------------------------------------------------
//メールチェック成功
//------------------------------------------------------------------------------

OnBIFFComplete
{
	if reference[0] == 0 {
		//---- メールは無かった
		<<"
		い：新着メールは無かったようです。
		">>
	}
	else {
		//---- メールが届いていた
		<<"
		い：%(reference[0])通のメールがあったようです。
		">>
	}
}

//------------------------------------------------------------------------------
//メールチェック失敗
//------------------------------------------------------------------------------
OnBIFFFailure
{
	<<"
	い：メールチェックに失敗しました。
	">>
	--
	if reference[0] == 'timeout' {
		//---- タイムアウト
		<<"
		い：接続の時間切れです。
		">>
	}
	elseif reference[0] == 'kick' {
		//---- 蹴られた
		<<"
		い：サーバーにキックされました。
		">>
	}
	elseif reference[0] == 'defect' {
		//---- 設定誤り
		<<"
		い：設定に誤りがあるかもしれません。
		">>
	}
	else {
		//---- 原因不明
		<<"
		い：原因不明です。
		">>
	}
}

//******************************************************************************
//ネットワーク更新
//******************************************************************************

//------------------------------------------------------------------------------
//ネットワーク更新開始
//------------------------------------------------------------------------------
OnUpdateBegin
{
	<<"
	い：ネットワーク更新を開始します...
	">>
}

//------------------------------------------------------------------------------
//ネットワーク更新準備完了
//------------------------------------------------------------------------------
OnUpdateReady
{
	<<"
	い：%(TOINT(reference[0])+1)個のファイルが更新されています...
	">>
}

//------------------------------------------------------------------------------
//ネットワーク更新終了
//------------------------------------------------------------------------------
OnUpdateComplete
{
	if reference[0] == 'none' {
		//---- 更新すべきファイルが無かった
		<<"
		い：チェック完了しました。
		い：新着はありませんでした。
		">>
	}
	else {
		//---- 実際に更新が完了した
		<<"
		い：更新完了しました。
		">>
	}
}

//------------------------------------------------------------------------------
//ネットワーク更新失敗
//------------------------------------------------------------------------------
OnUpdateFailure
{
	<<"
	い：更新失敗。
	い：理由は
	改無い【R0 == 'timeout'】：「時間切れ」です。
	改無い【R0 == 'md5 miss'】：「ファイル破損」です。
	改無い【それ以外】：「%(reference[0])」です。
	">>
}

//******************************************************************************
//ヘッドラインセンス
//******************************************************************************

//------------------------------------------------------------------------------
//ヘッドラインセンス開始
//------------------------------------------------------------------------------
OnHeadlinesenseBegin
{
	<<"
	い：ヘッドライン「%(reference[0])」を取得中です...
	">>
}

//------------------------------------------------------------------------------
//ヘッドライン読み上げ
//------------------------------------------------------------------------------
OnHeadlinesense.OnFind
{
	_headline_title = SHIORI3FW.EscapeDangerousTags(reference[0])
	<<"
	い【R2 == "First"||R2 == "First and Last"】：%(_headline_title)のヘッドラインです。
	い【R2 == "Next"】：%(_headline_title)ヘッドライン、続きです。
	い【それ以外】：%(_headline_title)ヘッドライン、これが最後のページです。
	＠設定：クイックセクション
	う：%(reference[3])
	＠半分メニュー【'Last' !_in_ R2】：次のページ|
	＠半分メニュー【直前分岐】：サイトへ|%(reference[1])
	＠メニュー【それ以外】：サイトへ|%(reference[1])
	＠メニュー：やめ|Menu_HEADLINECANCEL
	">>
}

//------------------------------------------------------------------------------
//ヘッドライン更新が無かった
//------------------------------------------------------------------------------
OnHeadlinesenseComplete
{
	<<"
	い：%(SHIORI3FW.EscapeDangerousTags(reference[0]))の更新は無いようです。
	">>
}

//------------------------------------------------------------------------------
//ヘッドラインセンス失敗
//------------------------------------------------------------------------------
OnHeadlinesenseFailure
{
	<<"
	い：ヘッドラインセンスの実行に失敗。
	い：理由は
	改無い【R0 == 'can't download'】：「ダウンロード失敗」。
	改無い【R0 == 'can't analyze'】：「ヘッドライン解析失敗」。
	改無い【それ以外】：不明です。
	">>
}

//******************************************************************************
//ファイル作成関連
//******************************************************************************

//------------------------------------------------------------------------------
//updates2.dau作成開始
//------------------------------------------------------------------------------
OnUpdatedataCreating
{
	<<"
	い：updates2.dauを作ります。
	">>
}

//------------------------------------------------------------------------------
//updates2.dau作成完了
//------------------------------------------------------------------------------
OnUpdatedataCreated
{
	<<"
	い：updates2.dau作成完了です。
	">>
}

//------------------------------------------------------------------------------
//NAR作成開始
//------------------------------------------------------------------------------
OnNarCreating
{
	<<"
	い：NARファイルを作ります。
	">>
}

//------------------------------------------------------------------------------
//NAR作成完了
//------------------------------------------------------------------------------
OnNarCreated
{
	<<"
	い：「%(SHIORI3FW.EscapeDangerousTags(reference[0]))」のnarファイル、
	い：「%(SHIORI3FW.EscapeDangerousTags(reference[1]))」を作成完了しました。
	">>
}

//******************************************************************************
//時計合わせ
//みか (http://homepage2.nifty.com/ko-ki/) の辞書を参考にしました。感謝＞こーき氏
//******************************************************************************

//------------------------------------------------------------------------------
//時計合わせ開始
//------------------------------------------------------------------------------
OnSNTPBegin
{
	<<"
	い：時計合わせですね。
	い：%(reference[0])に接続します。
	">>
}

//------------------------------------------------------------------------------
//時刻取得成功、比較開始
//この関数で 2008/03/25 19:15:05 のように見やすい形に作り変えます。
//詳しくはSTRFORM関数の説明を見てね！
//わからなければこのままで。
//------------------------------------------------------------------------------

SNTPCompare_StrForm
{
	_txt = SPLIT(_argv[0], ',')
	STRFORM('$04d/$02d/$02d $02d:$02d:$02d', TOINT(_txt[0]), TOINT(_txt[1]), TOINT(_txt[2]), TOINT(_txt[3]), TOINT(_txt[4]), TOINT(_txt[5]))
}

OnSNTPCompare
{
	<<"
	い：時計合わせ、完了しました。
	＠設定：クイックセクション
	い：修正前 %(SNTPCompare_StrForm(reference[2]))
	い：修正後 %(SNTPCompare_StrForm(reference[1]))
	＠設定：クイックセクション
	い【TOINT(R3) == 0】：ぴったりでした。
	い【それ以外】：%(reference[3])秒のずれを修正しました。
	">>
}

//------------------------------------------------------------------------------
//時計合わせ失敗
//------------------------------------------------------------------------------
OnSNTPFailure
{
	<<"
	い：時計合わせに失敗しました。
	">>
}

//******************************************************************************
//そのほか
//******************************************************************************

//------------------------------------------------------------------------------
//URLドロップ
//CROW でゴーストインストーラからゴーストをインストールを始めた時にも呼ばれます
//------------------------------------------------------------------------------
OnURLDropping
{
	<<"
	い：%(SHIORI3FW.EscapeDangerousTags(reference[0]))からデータを取得中です。
	">>
}