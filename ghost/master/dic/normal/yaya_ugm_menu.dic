// UGM_Navi_Umechan
// プラグイン系のメニュー
//******************************************************************************

Menu_UgmTools
{
	_BreadCrumbs = ('Menu|メニュー', 'Menu_UgmTools|現在地')
	_talk = ''

	_talk += '\![close,inputbox,__SYSTEM_ALL_INPUT__]'
	_talk += '\![quicksection,1]'
	_talk += '\0\_n'
	_talk += "%(CloseMenuButton)"
	_talk += "%(MenuBreadCrumbs(JOIN(_BreadCrumbs,',')))\n[150]"
	_talk += "%(MenuHr('スクリプト作成＆イベント試行'))\n"
	_talk += "%(MenuItem(1,'メッセージ送信・編集','Menu_Send','info'))\n"
	_talk += "%(MenuItem(1,'予約済みメッセージの取り消し','Menu_Cancel','info'))\n"
	_talk += "%(MenuItem(1,'メッセージ状況問い合わせ','Menu_Request'))\n"
	_talk += "%(MenuItem(1,'トリガーを引く','Menu_Trigger'))"
	_talk += '\_n'

	if isUgm == 1 {
		_talk += "\1%(MenuComment('UGMのスクリプト作成＆メニューです。'))"
	}
	else {
		_talk += '\1プラグインが認識されていません。'
	}

	_talk
}

//------------------------------------------------------------------------------
// プラグインから来るイベント
//------------------------------------------------------------------------------

OnUkagakaGhostMessenger_SendComplete
{
	if UgmExamplePlayingNow != '0' {
		return
	}

	_talk = ''

	_talk += '\![quicksection,1]'
	_talk += '\0\_n'

	_talk += '\f[bold,1]\_a[SendComplete]OnUkagakaGhostMessenger_SendComplete\_a\f[bold,0]\n[150]'

	_talk += '\f[bold,1]\_a[SendComplete_r0]成功種別\_a\f[bold,0]\n'
	_talk += "%(reference[0])\n[150]"

	_talk += '\f[bold,1]送信者識別子\f[bold,0]\n'
	_talk += "\_?%(reference[1])\_?\n[150]"

	_talk += '\f[bold,1]メッセージ識別子\f[bold,0]\n'
	_talk += "\_?%(reference[2])\_?"

	_talk += '\![quicksection,0]\_n'
	_talk += '\1メッセージの送信に成功しました。'

	_talk
}

OnUkagakaGhostMessenger_SendFailure
{
	_talk = ''

	_talk += '\![quicksection,1]'
	_talk += '\0\_n'

	_talk += '\f[bold,1]\_a[SendFailure]OnUkagakaGhostMessenger_SendFailure\_a\f[bold,0]\n[150]'

	_talk += '\f[bold,1]失敗理由\f[bold,0]\n'
	_talk += "%(reference[0])\n[150]"

	_talk += '\f[bold,1]\_a[SendFailure_r2]送信者識別子\_a\f[bold,0]\n'
	_talk += "\_?%(reference[1])\_?\n[150]"

	_talk += '\f[bold,1]\_a[SendFailure_r1]メッセージ識別子\_a\f[bold,0]\n'
	_talk += "\_?%(reference[2])\_?"

	_talk += '\![quicksection,0]\_n'
	_talk += '\1メッセージの送信に失敗しました。'

	_talk
}

OnUkagakaGhostMessenger_Response
{
	if UgmExamplePlayingNow == '2' {
		Menu_UgmExample_02_Time = reference[5]
		'\C\![quicksection,1]\w9\1\n完了しました。'
		return
	}

	_loop = ''
	for _i=6; _i<ARRAYSIZE(reference); _i++ {
		_loop += "\n[150]\f[bold,1]文字列ランダム結果%(HAN2ZEN(_i-5))\f[bold,0]\n\_?%(reference[_i])\_?"
	}

	_talk = ''

	_talk += '\![quicksection,1]'
	_talk += '\0\_n'

	_talk += '\f[bold,1]\_a[Response]OnUkagakaGhostMessenger_Response\_a\f[bold,0]\n[150]'

	_talk += '\f[bold,1]ゴースト名\f[bold,0]\n'
	_talk += "\_?%(reference[0])\_?\n[150]"

	_talk += '\f[bold,1]送信者識別子\f[bold,0]\n'
	_talk += "\_?%(reference[1])\_?\n[150]"

	_talk += '\f[bold,1]メッセージ識別子\f[bold,0]\n'
	_talk += "\_?%(reference[2])\_?\n[150]"

	_talk += '\f[bold,1]\_a[Response_r3]メッセージの発動済み回数\_a\f[bold,0]\n'
	_talk += "%(reference[3])\n[150]"

	_talk += '\f[bold,1]\_a[Response_r4]メッセージ発動時刻\_a\f[bold,0]\n'
	_talk += "%(reference[4])\n[150]"

	_talk += '\f[bold,1]\_a[Response_r5]メッセージ既読時刻\_a\f[bold,0]\n'
	_talk += "%(reference[5])"

	_talk += _loop
	_talk += '\![quicksection,0]\_n'
	_talk += '\1メッセージ情報の問い合わせ結果です。'

	_talk
}

OnUkagakaGhostMessenger_Ringing
{
	_from_umechan_talk = 'UkagakaGhostMessengerナビゲーターうめちゃん' + CHR(1) + 'うめちゃん' + CHR(1) + 'ume_talk01'
	if RE_ASEARCH( _from_umechan_talk , reference ) >= 0 {
		// ランダムトークからうめちゃんがメッセージを送った
		<<'
		い：\_w[1500]えへへ～。
		'>>
		UgmExamplePlayingNow = '0'
		return
	}
	
	if UgmExamplePlayingNow != '0' {
		return
	}

	_talk = ''

	_talk += '\![quicksection,1]'
	_talk += '\0\_n'

	_talk += '\f[bold,1]\_a[Ringing]OnUkagakaGhostMessenger_Ringing\_a\f[bold,0]'

	for _i0=0; _i0<ARRAYSIZE(reference); _i0++ {
		_cond = reference[i0]
		SETDELIM(_cond, CHR(1))

		_talk += "\n[150]\f[bold,1]＊メッセージ%(HAN2ZEN(_i0+1))件め＊\f[bold,0]\n[150]"
		
		_talk += '\f[bold,1]送信元ゴースト名\f[bold,0]\n'
		_talk += "\_?%(_cond[0])\_?\n[150]"

		_talk += '\f[bold,1]送信者識別子\f[bold,0]\n'
		_talk += "\_?%(_cond[1])\_?\n[150]"

		_talk += '\f[bold,1]メッセージ識別子\f[bold,0]\n'
		_talk += "\_?%(_cond[2])\_?"

		_ev_refs = ''
		for _i1=3; _i1<ARRAYSIZE(_cond); _i1++ {
			_ev_refs += "\n[150]\f[bold,1]追加情報%(HAN2ZEN(_i1-2))\f[bold,0]\n%(_cond[_i1])"
		}
		_talk += _ev_refs
	}

	_talk += '\![quicksection,0]\_n\1メッセージが発動しました。'

	_talk
}

//------------------------------------------------------------------------------
// クリップボードにコピーする
//------------------------------------------------------------------------------

Menu_CopyScript
{
	_script = 'MakeScript_' + reference[2]
	_return_to = 'Menu_' + reference[2]
	if (ISEVALUABLE(_script) == 1) {
		_script = EVAL(_script)
		if (STRLEN(_script) > 0) {
			FUNCTIONEX('textcopy2.dll', _script)
		}
	}
	MenuCommentForce = 'クリップボードにコピーしました。'
	if ISFUNC(_return_to) {
		// 帰り先がある
		EVAL(_return_to)
	}
	else {
		// 帰り先を見つけられなかったのでコメントだけ言う
		MenuCommentForce
		ERASEVAR('MenuCommentForce')
	}
}

//------------------------------------------------------------------------------
// プラグインに送るスクリプトを作る
//------------------------------------------------------------------------------

MakeScript_Send
{
	_script = '\![raiseplugin,6f0415e0-3c00-11ef-9a9c-0800200c9a66,OnUkagakaGhostMessenger_Send'
	if (STRLEN(send_SenderId) > 0) {
		_script += ',"--SenderId=' + send_SenderId + '"'
	}
	if (STRLEN(send_SenderName) > 0) {
		_script += ',"--SenderName=' + send_SenderName + '"'
	}
	if (STRLEN(send_SenderIcon) > 0) {
		_script += ',"--SenderIcon=' + send_SenderIcon + '"'
	}
	if (STRLEN(send_SenderProfile) > 0) {
		_script += ',"--SenderProfile=' + send_SenderProfile + '"'
	}
	if (STRLEN(send_MessageId) > 0) {
		_script += ',"--MessageId=' + send_MessageId + '"'
	}
	if (STRLEN(TOSTR(send_Enable)) > 0) {
		_script += ',--Enable=' + send_Enable
	}
	if (STRLEN(send_Text) > 0) {
		_script += ',"--Text=' + send_Text + '"'
	}
	if (STRLEN(TOSTR(send_RunCount)) > 0) {
		_script += ',--RunCount=' + send_RunCount
	}
	if (STRLEN(TOSTR(send_Late)) > 0) {
		_script += ',--Late=' + send_Late
	}
	foreach send_EventReference; _ev_ref {
		if (STRLEN(TOSTR(_ev_ref)) > 0) {
			_script += ',"--EventReference=' + _ev_ref + '"'
		}
	}
	if (STRLEN(send_Time_After) > 0) {
		_script += ',"--Condition=Time_After:' + send_Time_After + '"'
	}
	if (STRLEN(send_Time_Seconds) > 0) {
		_script += ',--Condition=Time_Seconds:' + send_Time_Seconds
	}
	if (STRLEN(send_Time_DayOfWeek) > 0) {
		_script += ',--Condition=Time_DayOfWeek:' + send_Time_DayOfWeek
	}
	if (STRLEN(send_Time_During) > 0) {
		_script += ',"--Condition=Time_During:' + send_Time_During + '"'
	}
	if (STRLEN(send_Ghost_Booted) > 0) {
		_script += ',"--Condition=Ghost_Booted:' + send_Ghost_Booted + '"'
	}
	if (STRLEN(send_Ghost_Closed) > 0) {
		_script += ',"--Condition=Ghost_Closed:' + send_Ghost_Closed + '"'
	}
	if (STRLEN(send_Ghost_IsBooting) > 0) {
		_script += ',"--Condition=Ghost_IsBooting:' + send_Ghost_IsBooting + '"'
	}
	if (STRLEN(send_Ghost_IsNotBooting) > 0) {
		_script += ',"--Condition=Ghost_IsNotBooting:' + send_Ghost_IsNotBooting + '"'
	}
	if (STRLEN(send_Ghost_Exists) > 0) {
		_script += ',"--Condition=Ghost_Exists:' + send_Ghost_Exists + '"'
	}
	if (STRLEN(send_Ghost_NotExists) > 0) {
		_script += ',"--Condition=Ghost_NotExists:' + send_Ghost_NotExists + '"'
	}
	if (STRLEN(send_Ghost_IsInAddressBook) > 0) {
		_script += ',"--Condition=Ghost_IsInAddressBook:' + send_Ghost_IsInAddressBook + '"'
	}
	if (STRLEN(send_Ghost_Triggered) > 0) {
		_script += ',"--Condition=Ghost_Triggered:' + send_Ghost_Triggered + '"'
	}
	if (STRLEN(send_Message_Run) > 0) {
		_script += ',"--Condition=Message_Run:' + send_Message_Run + '"'
	}
	if (STRLEN(send_Message_IsRun) > 0) {
		_script += ',"--Condition=Message_IsRun:' + send_Message_IsRun + '"'
	}
	if (STRLEN(send_Message_IsNotRun) > 0) {
		_script += ',"--Condition=Message_IsNotRun:' + send_Message_IsNotRun + '"'
	}
	if (STRLEN(send_Message_Read) > 0) {
		_script += ',"--Condition=Message_Read:' + send_Message_Read + '"'
	}
	if (STRLEN(send_Message_IsRead) > 0) {
		_script += ',"--Condition=Message_IsRead:' + send_Message_IsRead + '"'
	}
	if (STRLEN(send_Message_IsNotRead) > 0) {
		_script += ',"--Condition=Message_IsNotRead:' + send_Message_IsNotRead + '"'
	}
	_script += ']'

	_script
}

MakeScript_Cancel
{
	// referenceの順番厳守
	_script = '\![raiseplugin,6f0415e0-3c00-11ef-9a9c-0800200c9a66,OnUkagakaGhostMessenger_Cancel,'
	if (STRLEN(cancel_SenderId) > 0) {
		_script += '"' + cancel_SenderId + '"'
	}
	_script += ']'
	_script
}

MakeScript_Trigger
{
	// referenceの順番厳守
	_script = '\![raiseplugin,6f0415e0-3c00-11ef-9a9c-0800200c9a66,OnUkagakaGhostMessenger_Trigger,'
	if (STRLEN(trigger_TriggerId) > 0) {
		_script += '"' + trigger_TriggerId + '"'
	}
	_script += ','
	if (STRLEN(trigger_TargerSender) > 0) {
		_script += '"' + trigger_TargerSender + '"'
	}
	_script += ','
	if (STRLEN(trigger_TargetSenderId) > 0) {
		_script += '"' + trigger_TargetSenderId + '"'
	}
	_script += ']'
	_script
}

MakeScript_Request
{
	// referenceの順番厳守
	_script = '\![raiseplugin,6f0415e0-3c00-11ef-9a9c-0800200c9a66,OnUkagakaGhostMessenger_Request,'
	if (STRLEN(request_Sender) > 0) {
		_script += '"' + request_Sender + '"'
	}
	_script += ','
	if (STRLEN(request_SenderId) > 0) {
		_script += '"' + request_SenderId + '"'
	}
	_script += ','
	if (STRLEN(request_MessageId) > 0) {
		_script += '"' + request_MessageId + '"'
	}
	_script += ']'
	_script
}

//------------------------------------------------------------------------------
// プラグインにイベントを送る
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// 引数の文字数がゼロなら未設定という文字列で返す
//------------------------------------------------------------------------------
GenerateTextLabel
{
	if (STRLEN(_argv[0]) <= 0) {
		'\f[color,disable]※未設定※\f[color,default]'
	}
	else {
		_argv[0]
	}
}

//------------------------------------------------------------------------------
// OnUkagakaGhostMessenger_Request系列
//------------------------------------------------------------------------------

Menu_Request
{
	_BreadCrumbs = ('Menu|メニュー', 'Menu_UgmTools|UGM:作成&試行', 'Menu_Request|現在地')
	_talk = ''

	_talk += '\![close,inputbox,__SYSTEM_ALL_INPUT__]'
	_talk += '\![quicksection,1]'
	_talk += '\0\_n'
	_talk += "%(CloseMenuButton)"
	_talk += "%(MenuBreadCrumbs(JOIN(_BreadCrumbs,',')))\n[150]"

	_talk += "%(MenuHr('\_a[Request]メッセージ状況の取得\_a'))\n"
	_talk += "%(MenuItem(1,'以下の内容で問い合わせる','Menu_Request_Exec'))\n"
	_talk += "%(MenuItem(1,'スクリプトをコピーする','Menu_CopyScript','Request'))\n[150]"

	_talk += '\f[bold,1]\_a[Request_r0]ゴースト名\_a\f[bold,0]\n'
	_talk += "%(MenuItem(1,GenerateTextLabel(request_Sender),'Menu_Request_Edit','request_Sender'))\n[150]"

	_talk += '\f[bold,1]\_a[Request_r1]送信者識別子\_a\f[bold,0]\n'
	_talk += "%(MenuItem(1,GenerateTextLabel(request_SenderId),'Menu_Request_Edit','request_SenderId'))\n[150]"

	_talk += '\f[bold,1]メッセージ識別子\f[bold,0]\n'
	_talk += "%(MenuItem(1,GenerateTextLabel(request_MessageId),'Menu_Request_Edit','request_MessageId'))"

	_talk += '\_n'
	_talk += "\1%(MenuComment(OnExplanationCall('Request')))"

	_talk
}

Menu_Request_Exec
{
	_script = MakeScript_Request
	MenuCommentForce = 'メッセージ情報を問い合わせます。' + _script
	Menu_Request
}

Menu_Request_Edit
{
	_r2 = EVAL(reference[2])
	_script = '\![close,inputbox,__SYSTEM_ALL_INPUT__]\![open,inputbox,Menu_Request_Edit_Entered,0'
	if (STRLEN(_r2) > 0) {
		_script += ',--text="'
		_script += _r2
		_script += '"'
	}
	_script += ',--reference='
	_script += reference[2]
	_script += ']'
	MenuCommentForce = _script
	case reference[2] {
		when 'request_Sender' {
			MenuCommentForce += 'ゴースト名を入力してください。'
		}
		when 'request_SenderId' {
			MenuCommentForce += '送信者識別子を入力してください。'
		}
		when 'request_MessageId' {
			MenuCommentForce += 'メッセージ識別子を入力してください。'
		}
	}
	Menu_Request
}

Menu_Request_Edit_tooltip
{
	if ISEVALUABLE(reference[2]) == 1 {
		EVAL(reference[2])
	}
}

Menu_Request_Edit_Entered
{
	_entered = reference[1]
	_entered = SHIORI3FW.TranslateSystemChar(_entered)
	_entered = SHIORI3FW.EscapeAllTags(_entered)
	LETTONAME(reference[3], _entered)
	Menu_Request
}

//------------------------------------------------------------------------------
// OnUkagakaGhostMessenger_Send系列
//------------------------------------------------------------------------------

Menu_Send
{
	_right = "\_l[%(BalloonValidWidth/2),]"
	_BreadCrumbs = ('Menu|メニュー', 'Menu_UgmTools|UGM:作成&試行', 'Menu_Send|現在地')
	_talk = ''

	_talk += '\![quicksection,1]'
	_talk += '\0\_n\![set,autoscroll,disable]'
	_talk += "%(CloseMenuButton)"
	_talk += "%(MenuBreadCrumbs(JOIN(_BreadCrumbs,',')))\n[150]"
	_talk += "%(MenuHr('\_a[Send]メッセージ送信と編集\_a'))\n"
	_talk += "%(MenuItem(1,'入力済みの内容で送信する','Menu_Send_Exec',_argv[0]))\n"
	_talk += "%(MenuItem(1,'スクリプトをコピーする','Menu_CopyScript','Send'))\n"
	_talk += "%(MenuItem(1,'活用例プリセットを選ぶ','Menu_Send_SampleSelect'))\n"
	_talk += "%(MenuItem(1,'このページの入力内容を削除する','Menu_Send_Initialize',_argv[0]))\n[150]"

	if (_argv[0] == 'cond') {
		_talk += '\__q[Menu_Send_PageTurn,info]［情報］\__q　\__q[Menu_Send_PageTurn,reference]［追加情報］\__q　\f[underline,1]【条件】\f[underline,0]\n[150]'

		_talk += '\f[bold,1]\_a[Time_After]指定時刻以降\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_Time_After),'Menu_Send_Edit','send_Time_After'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[Time_Seconds]指定秒数経過後\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_Time_Seconds),'Menu_Send_Edit','send_Time_Seconds'))\n[150]"

		_talk += '\f[bold,1]\_a[Time_DayOfWeek]指定の曜日\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_Time_DayOfWeek),'Menu_Send_Edit','send_Time_DayOfWeek'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[Time_During]指定の時間帯\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_Time_During),'Menu_Send_Edit','send_Time_During'))\n[150]"

		_talk += '\f[bold,1]\_a[Ghost_Booted]ゴーストが起動した\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_Ghost_Booted),'Menu_Send_Edit','send_Ghost_Booted'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[Ghost_Closed]ゴーストが終了した\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_Ghost_Closed),'Menu_Send_Edit','send_Ghost_Closed'))\n[150]"

		_talk += '\f[bold,1]\_a[Ghost_IsBooting]ゴーストが起動中\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_Ghost_IsBooting),'Menu_Send_Edit','send_Ghost_IsBooting'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[Ghost_IsNotBooting]ゴーストが非起動中\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_Ghost_IsNotBooting),'Menu_Send_Edit','send_Ghost_IsNotBooting'))\n[150]"

		_talk += '\f[bold,1]\_a[Ghost_Exists]ゴースト導入済み\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_Ghost_Exists),'Menu_Send_Edit','send_Ghost_Exists'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[Ghost_NotExists]ゴースト未導入\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_Ghost_NotExists),'Menu_Send_Edit','send_Ghost_NotExists'))\n[150]"

		_talk += '\f[bold,1]\_a[Ghost_IsInAddressBook]ゴースト連絡先登録済\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_Ghost_IsInAddressBook),'Menu_Send_Edit','send_Ghost_IsInAddressBook'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[Ghost_Triggered]トリガーを引かれた\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_Ghost_Triggered),'Menu_Send_Edit','send_Ghost_Triggered'))\n[150]"

		_talk += '\f[bold,1]\_a[Message_Run]メッセージが発動した\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_Message_Run),'Menu_Send_Edit','send_Message_Run'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[Message_Read]メッセージが読まれた\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_Message_Read),'Menu_Send_Edit','send_Message_Read'))\n[150]"

		_talk += '\f[bold,1]\_a[Message_IsRun]メッセージ発動済み\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_Message_IsRun),'Menu_Send_Edit','send_Message_IsRun'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[Message_IsNotRun]メッセージ未発動\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_Message_IsNotRun),'Menu_Send_Edit','send_Message_IsNotRun'))\n[150]"

		_talk += '\f[bold,1]\_a[Message_IsRead]メッセージが既読\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_Message_IsRead),'Menu_Send_Edit','send_Message_IsRead'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[Message_IsNotRead]メッセージが未読\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_Message_IsNotRead),'Menu_Send_Edit','send_Message_IsNotRead'))\n[150]"

		_talk += '\f[bold,1]\_a[Ugm_IsRunning]プラグインが起動中\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_Ugm_IsRunning),'Menu_Send_Edit','send_Ugm_IsRunning'))"
	}
	elseif (_argv[0] == 'reference') {
		_loop = ''
		_count = 0
		for _i=0; _i<ARRAYSIZE(send_EventReference); _i++ {
			_loop += "Reference%(_i+3): \![*]\__q[Menu_Send_Edit_EventReference,%(_count)]%(SHIORI3FW.MakeJustText(send_EventReference[_count],BalloonCharCnt-16))\__q\n[150]"
			_count = _i + 1
		}
		_loop += "Reference%(_i+3): \![*]\__q[Menu_Send_Edit_EventReference,%(_count)]\f[color,disable]%(SHIORI3FW.MakeJustText('※未設定※',BalloonCharCnt-16))\f[color,default]\__q"

		_talk += '\__q[Menu_Send_PageTurn,info]［情報］\__q　\f[underline,1]【追加情報】\f[underline,0]　\__q[Menu_Send_PageTurn,cond]［条件］\__q\n[150]'
		_talk += '\f[bold,1]\_a[EventReference]イベントリファレンス\_a\f[bold,0]\n[150]'
		_talk += _loop
	}
	else {
		_talk += '\f[underline,1]【情報】\f[underline,0]　\__q[Menu_Send_PageTurn,reference]［追加情報］\__q　\__q[Menu_Send_PageTurn,cond]［条件］\__q\n[150]'

		_talk += '\f[bold,1]\_a[Text]本文\_a\f[bold,0]\n'
		_talk += "%(MenuItem(1,GenerateTextLabel(send_Text),'Menu_Send_Edit','send_Text'))\n[150]"

		_talk += '\f[bold,1]\_a[MessageId]メッセージ識別子\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_MessageId),'Menu_Send_Edit','send_MessageId'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[Enable]有効状態\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_Enable),'Menu_Send_Edit','send_Enable'))\n[150]"

		_talk += '\f[bold,1]\_a[SenderId]送信者識別子\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_SenderId),'Menu_Send_Edit','send_SenderId'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[SenderName]表示用送信者名\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_SenderName),'Menu_Send_Edit','send_SenderName'))\n[150]"

		_talk += '\f[bold,1]\_a[SenderIcon]アイコン画像\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_SenderIcon),'Menu_Send_Edit','send_SenderIcon'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[SenderProfile]プロフィール文章\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_SenderProfile),'Menu_Send_Edit','send_SenderProfile'))\n[150]"

		_talk += '\f[bold,1]\_a[RunCount]実行回数\_a\f[bold,0]\n'
		_talk += "%(MenuItem(2,GenerateTextLabel(send_RunCount),'Menu_Send_Edit','send_RunCount'))\n[-100]"
		_talk += "%(_right)\f[bold,1]\_a[Late]遅延秒数\_a\f[bold,0]\n"
		_talk += "%(_right)%(MenuItem(2,GenerateTextLabel(send_Late),'Menu_Send_Edit','send_Late'))"
	}

	_talk += '\_n'
	_talk += "\1%(MenuComment(OnExplanationCall('Send')))"

	_talk
}

Menu_Send_SampleSelect
{
	_BreadCrumbs = ('Menu|メニュー', 'Menu_UgmTools|UGM:作成&試行', 'Menu_Send|送信', 'Menu_Send_SampleSelect|現在地')
	_script = '\1\s[10]\0\s[0]'
	_script += '\![quicksection,1]'
	_script += '\0'
	_script += '\_n'
	_script += '\![set,autoscroll,disable]'
	_script += CloseMenuButton()
	_script += MenuBreadCrumbs(JOIN(_BreadCrumbs, ',')) + '\n[150]'
	_script += MenuHr('メッセージ送信の入力例') + '\n'
	_script += MenuItem(1, '初期設定に戻す', 'Menu_Send_SampleSet') + '\n'
	_script += MenuItem(1, 'プロフィールのみ更新', 'Menu_Send_SampleSet', '1') + '\n'
	_script += MenuItem(1, '文面ランダム', 'Menu_Send_SampleSet', '2') + '\n'
	_script += MenuItem(1, '時刻を本文に反映', 'Menu_Send_SampleSet', '3') + '\n'
	_script += MenuItem(1, '定期的に無限繰り返し', 'Menu_Send_SampleSet', '4') + '\n'
	_script += MenuItem(1, '自分がいないときだけメッセージを発動', 'Menu_Send_SampleSet', '5') + '\n'
	_script += MenuItem(1, 'メッセージ単体取り消し', 'Menu_Send_SampleSet', '6') + '\n'
	_script += MenuItem(1, 'スタンプを添付する', 'Menu_Send_SampleSet', '7') + '\n'
	_script += MenuItem(1, '画像を添付する', 'Menu_Send_SampleSet', '8')
	_script += '\1'
	_script += MenuComment('いま入力済みの状態は全部消えてしまうので、\n気を付けてくださいね。')

	_script
}

Menu_Send_SampleSet
{
	// まず全部を未入力にし、後で関係のある個所のみ変更する
	send_SenderId = 'うめちゃん'
	send_SenderName = ''
	send_SenderIcon = ''
	send_SenderProfile = ''
	send_MessageId = 'test01'
	send_Enable = 1
	send_Text = ''
	send_RunCount = 1
	send_Late = 0
	end_EventReference = IARRAY
	send_Time_After = ''
	send_Time_Seconds = ''
	send_Time_DayOfWeek = ''
	send_Time_During = ''
	send_Ghost_Booted = ''
	send_Ghost_Closed = ''
	send_Ghost_IsBooting = ''
	send_Ghost_IsNotBooting = ''
	send_Ghost_Exists = ''
	send_Ghost_NotExists = ''
	send_Ghost_IsInAddressBook = ''
	send_Ghost_Triggered = ''
	send_Message_Run = ''
	send_Message_IsRun = ''
	send_Message_IsNotRun = ''
	send_Message_Read = ''
	send_Message_IsRead = ''
	send_Message_IsNotRead = ''
	send_Ugm_IsRunning = ''

	case reference[2] {
		when '1' {
			// プロフィールのみ更新
			MenuCommentForce = '本文未設定だと、\n通知なしでプロフィールだけが更新されます。'
			send_SenderProfile = 'プロフィールだけの更新です'
		}
		when '2' {
			// 文面ランダム
			MenuCommentForce = 'メッセージ本文とプロフィール文章は、\n文面をランダムにすることもできます。\n[150]/
			「:choice_start:」と「:choice_end:」で囲んで、\n区切りを「:」にしてください。\n[150]/
			ランダム選択の中に\n他の\_a[プラグイン独自の記法]独自タグ\_aをいれることはできません。'
			send_SenderProfile = 'うめちゃんのいるところの今日の天気は:choice_start:快晴:晴れ:晴れ:晴れ:くもり:くもり:くもり:雨:雪:choice_end:です'
			send_Text = ':choice_start:桃は甘いですね:栗ご飯はほくほくですね:渋柿を干すと渋みが抜けるのは不思議ですね:choice_end:'
		}
		when '3' {
			// 時刻を本文やプロフィールに反映
			MenuCommentForce = '本文とプロフィール文章には、\nメッセージ発動時の情報を反映させることができます。\n[150]/
			本体が起動されていなかったり、\nプラグインが無効にされている間は\nメッセージは発動したことにならないので、\n注意してください。'
			send_SenderProfile = ':year:年:month:月:day:日もうめちゃんは元気です'
			send_Text = ':weekday:曜日ですね:nl:ユーザさんの調子はどうですか？'
		}
		when '4' {
			// 定期的に無限繰り返し
			MenuCommentForce = '条件「指定秒数経過後」を86400秒(24時間)後、\n情報「実行回数」を無限回(0)にしました。\n[150]/
			メッセージ発動後、24時間経つと\n再度メッセージが発動されます。\n[150]/
			この設定だと、最初のメッセージ発動も\n送信から24時間後になります。'
			send_Time_Seconds = 86400
			send_RunCount = 0
			send_Text = ':month:月:day:日ですね:nl:うめちゃんは今日も元気です'
		}
		when '5' {
			// 自分がいないときだけメッセージを発動
			MenuCommentForce = '条件「ゴーストが非起動中」に自分を入れると、\n自分がいない時だけメッセージを発動させられます。\n[150]/
			ゴースト終了後すぐ発動しないように、\n情報の「遅延秒数」を600～1200秒に変更しています。'
			send_Text = 'ユーザさん、調子はどうですか？'
			send_Ghost_IsNotBooting = 'UkagakaGhostMessengerナビゲーターうめちゃん'
			send_Late = '600-1200'
		}
		when '6' {
			// メッセージ単体取り消し
			MenuCommentForce = '情報「送信者識別子」と「メッセージ識別子」の\n一致する、予約済みのメッセージを取り消せます。\n[150]/
			予約中のメッセージを全て取り消したい時は、\n\_a[Menu_Cancel]一括取り消し\_aを使ってください。\n[150]/
			他のゴーストの予約や、\n発動済みメッセージは取り消せません。'
			send_Enable = 0
		}
		when '7' {
			// スタンプを添付する
			MenuCommentForce = 'メッセージ本文に、\_a[スタンプ貼り付け]スタンプ\_aを\n添付することができます。'
			send_Text = 'ユーザさん、こんにちは！:stamp026:うめちゃんは今日も元気です～'
		}
		when '8' {
			// 画像を添付する
			MenuCommentForce = 'メッセージ本文に、\_a[画像貼り付け]画像を添付する\_aことができます。\n[150]/
			\_a[スタンプとしての画像貼り付け]オリジナルのスタンプ風にも貼り付けられます\_a。'
			send_Text = ':image:img\\wagashi.png:alt=和菓子:うめちゃんは今、この和菓子を食べています～:image:nozoom=img\\stamp_onpu.png:alt=音符:とってもおいしいです！'
		}
		others {
			// 初期設定に戻す
			MenuCommentForce = '送信内容をインストール時の初期状態に戻しました。'
			send_SenderId = 'うめちゃん'
			send_SenderName = 'うめちゃん@UGMナビ'
			send_SenderIcon = 'img\\umechan_icon.png'
			send_SenderProfile = 'うめちゃんはUkagakaGhostMessengerの:nl:ナビキャラです。'
			send_Text = 'ほにゃらら'
		}
	}
	Menu_Send
}

Menu_Send_Initialize
{
	case reference[2] {
		when 'reference' {
			send_EventReference = IARRAY
		}
		when 'cond' {
			send_Time_After = ''
			send_Time_Seconds = ''
			send_Time_DayOfWeek = ''
			send_Time_During = ''
			send_Ghost_Booted = ''
			send_Ghost_Closed = ''
			send_Ghost_IsBooting = ''
			send_Ghost_IsNotBooting = ''
			send_Ghost_Exists = ''
			send_Ghost_NotExists = ''
			send_Ghost_IsInAddressBook = ''
			send_Ghost_Triggered = ''
			send_Message_Run = ''
			send_Message_IsRun = ''
			send_Message_IsNotRun = ''
			send_Message_Read = ''
			send_Message_IsRead = ''
			send_Message_IsNotRead = ''
		}
		others {
			send_SenderId = ''
			send_SenderName = ''
			send_SenderIcon = ''
			send_SenderProfile = ''
			send_MessageId = 'test01'
			send_Enable = 1
			send_Text = ''
			send_RunCount = 1
			send_Late = 0
		}
	}
	Menu_Send(reference[2])
}

Menu_Send_PageTurn
{
	case reference[2] {
		when 'info' {
			MenuCommentForce = '情報を編集しますか？\n[150]未設定に戻すときは、空欄で決定してください。'
		}
		when 'reference' {
			MenuCommentForce = '追加情報を編集しますか？\n[150]未設定に戻すときは、空欄で決定してください。'
		}
		when 'cond' {
			MenuCommentForce = '条件を編集しますか？\n[150]未設定に戻すときは、空欄で決定してください。\n[150]/
			設定済みの条件を全て達成した時だけ\nメッセージは発動します。\n[150]/
			条件がひとつも無いなら、送信後すぐに\nメッセージが発動します。'
		}
	}
	Menu_Send(reference[2])
}

Menu_Send_Exec
{
	_script = MakeScript_Send
	MenuCommentForce = '送信します。' + _script
	Menu_Send(reference[2])
}

Menu_Send_Edit
{
	_r2 = EVAL(reference[2])
	_script = '\![close,inputbox,__SYSTEM_ALL_INPUT__]\![open,inputbox,Menu_Send_Edit_Entered,0'
	if (STRLEN(_r2) > 0) {
		_script += ',--text="'
		_script += _r2
		_script += '"'
	}
	_script += ',--reference='
	_script += reference[2]
	_script += ']'

	_kaisetsu = SUBSTR(reference[2], 5, 999)
	_script += OnExplanationCall(_kaisetsu)

	MenuCommentForce = _script

	if (STRSTR(reference[2], 'send_Time_', 0) == 0 || STRSTR(reference[2], 'send_Ghost_', 0) == 0 || STRSTR(reference[2], 'send_Message_', 0) == 0 || STRSTR(reference[2], 'send_Ugm_', 0) == 0) {
		Menu_Send('cond')
	}
	else {
		Menu_Send
	}
}

Menu_Send_Edit_tooltip
{
	if ISEVALUABLE(reference[2]) == 1 {
		EVAL(reference[2])
	}
}

Menu_Send_Edit_Entered
{
	_r1 = reference[1]
	_r1 = RE_REPLACE(_r1, '"+', '""')
	_r1 = SHIORI3FW.EscapeAllTags(_r1)
	_r3 = reference[3]
	_title = RE_REPLACE(_r3, '^send_', '') + '題名'
	_title = EVAL(_title)

	case _r3 {
		when 'send_Text' {
			send_Text = _r1
			MenuCommentForce = "%(_title)を設定しました。"
		}
		when 'send_MessageId' {
			send_MessageId = SHIORI3FW.TranslateSystemChar(_r1)
			if STRLEN(send_MessageId) <= 0 {
				send_MessageId = 'test01'
				MenuCommentForce = "%(_title)を初期値に戻しました。"
			}
		}
		when 'send_Enable' {
			if STRLEN(_r1) <= 0 {
				send_Enable = 1
				MenuCommentForce = "%(_title)を初期値に戻しました。"
			}
			elseif TOINT(_r1) == 1 || TOINT(_r1) == 0 {
				send_Enable = TOINT(_r1)
				MenuCommentForce = "%(_title)を設定しました。"
			}
			else {
				send_Enable = 1
				MenuCommentForce = "%(_title)を初期値に戻しました。"
			}
		}
		when 'send_SenderId' {
			send_SenderId = SHIORI3FW.TranslateSystemChar(_r1)
			MenuCommentForce = "%(_title)を設定しました。"
		}
		when 'send_SenderName' {
			send_SenderName = _r1
			MenuCommentForce = "%(_title)を設定しました。"
		}
		when 'send_SenderIcon' {
			send_SenderIcon = _r1
			MenuCommentForce = "%(_title)を設定しました。"
		}
		when 'send_SenderProfile' {
			send_SenderProfile = _r1
			MenuCommentForce = "%(_title)を設定しました。"
		}
		when 'send_RunCount' {
			if !(TOINT(_r1) >= 0) {
				send_RunCount = 1
				MenuCommentForce = "%(_title)を初期値に戻しました。"
			}
			else {
				send_RunCount = TOINT(_r1)
				MenuCommentForce = "%(_title)を設定しました。"
			}
		}
		when 'send_Late' {
			if (RE_MATCH(_r1, '\d+') == 1) {
				send_Late = TOINT(_r1)
				MenuCommentForce = "%(_title)を設定しました。"
			}
			else {
				_arr = ASORT('int', ARRAYDEDUP(SPLITEX(TOSTR(_r1), '-')))
				if ARRAYSIZE(_arr) >= 2 {
					_arr = (TOINT(_arr[0]), TOINT(_arr[1]))
					send_Late = JOIN(_arr, '-')
					MenuCommentForce = "%(_title)を設定しました。"
				}
				else {
					send_Late = TOINT(_arr[0])
					MenuCommentForce = "%(_title)を設定しました。"
				}
			}
		}
		when 'send_Time_After' {
			_arr = SPLITEX(TOSTR(_r1), '/')
			_now = GETTIME()
			_now = (_now[0], _now[1], _now[2], _now[4], _now[5])
			_entered = IARRAY
			for _i=0; _i<5; _i++ {
				if (RE_MATCH(_arr[_i], '\d+') == 1) {
					_entered[_i] = TOINT(_arr[_i])
				}
				else {
					_entered[_i] = _now[_i]
				}
			}
			_time = GETSECCOUNT(_entered[0], _entered[1], _entered[2], 0, _entered[3], _entered[4], 0)
			_time = GETTIME(_time)
			_result = ''
			case ARRAYSIZE(_arr) {
				when 0 {
					// スルー
				}
				when 1 {
					_result = STRFORM('$02d', _time[5])
				}
				when 2 {
					_result = STRFORM('$02d/$02d', _time[4], _time[5])
				}
				when 3 {
					_result = STRFORM('$02d/$02d/$02d', _time[2], _time[4], _time[5])
				}
				when 4 {
					_result = STRFORM('$02d/$02d/$02d/$02d', _time[1], _time[2], _time[4], _time[5])
				}
				others {
					_result = STRFORM('$04d/$02d/$02d/$02d/$02d', _time[0], _time[1], _time[2], _time[4], _time[5])
				}
			}
			if STRLEN(_result) <= 0 {
				send_Time_After = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
			else {
				send_Time_After = _result
				MenuCommentForce = "%(_title)を設定しました。"
			}
		}
		when 'send_Time_Seconds' {
			if (STRLEN(_r1) > 0 && TOINT(_r1) >= 0) {
				send_Time_Seconds = TOINT(_r1)
				MenuCommentForce = "%(_title)を設定しました。"
			}
			else {
				send_Time_Seconds = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
		}
		when 'send_Time_DayOfWeek' {
			_r1 = TOINT(_r1)
			if (_r1 >= 1 && _r1 <= 7) {
				send_Time_DayOfWeek = _r1
				MenuCommentForce = "%(_title)を設定しました。"
			}
			else {
				send_Time_DayOfWeek = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
		}
		when 'send_Time_During' {
			_result = IARRAY
			_arr = SPLITEX(TOSTR(_r1), ':')
			foreach _arr; _time {
				_time = SPLITEX(TOSTR(_time), '/')
				_time = (TOINT(_time[0]), TOINT(_time[1]))
				_time = ARRAYDEDUP(_time)
				if ARRAYSIZE(_time) == 2 {
					_result ,= STRFORM('$04d/$04d', TOINT(_time[0]), TOINT(_time[1]))
				}
			}
			if ARRAYSIZE(_result) <= 0 {
				send_Time_During = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
			else {
				send_Time_During = JOIN(_result, ':')
				MenuCommentForce = "%(_title)を設定しました。"
			}
		}
		when 'send_Ghost_Booted' {
			send_Ghost_Booted = SHIORI3FW.TranslateSystemChar(_r1)
			MenuCommentForce = "%(_title)を設定しました。"
		}
		when 'send_Ghost_Closed' {
			send_Ghost_Closed = SHIORI3FW.TranslateSystemChar(_r1)
			MenuCommentForce = "%(_title)を設定しました。"
		}
		when 'send_Ghost_IsBooting' {
			if (STRSTR(_r1, ':', 0) == -1) {
				send_Ghost_IsBooting = SHIORI3FW.TranslateSystemChar(_r1)
				MenuCommentForce = "%(_title)を設定しました。"
			}
			else {
				_arr = SPLITEX(TOSTR(_r1), ':')
				_result = IARRAY
				foreach _arr; _ghost {
					_result ,= SHIORI3FW.TranslateSystemChar(_ghost)
				}
				send_Ghost_IsBooting = JOIN(_result, ':')
				MenuCommentForce = "%(_title)を設定しました。"
			}
		}
		when 'send_Ghost_IsNotBooting' {
			if (STRSTR(_r1, ':', 0) == -1) {
				send_Ghost_IsNotBooting = SHIORI3FW.TranslateSystemChar(_r1)
				MenuCommentForce = "%(_title)を設定しました。"
			}
			else {
				_arr = SPLITEX(TOSTR(_r1), ':')
				_result = IARRAY
				foreach _arr; _ghost {
					_result ,= SHIORI3FW.TranslateSystemChar(_ghost)
				}
				send_Ghost_IsNotBooting = JOIN(_result, ':')
				MenuCommentForce = "%(_title)を設定しました。"
			}
		}
		when 'send_Ghost_Exists' {
			if (STRSTR(_r1, ':', 0) == -1) {
				send_Ghost_Exists = SHIORI3FW.TranslateSystemChar(_r1)
				MenuCommentForce = "%(_title)を設定しました。"
			}
			else {
				_arr = SPLITEX(TOSTR(_r1), ':')
				_result = IARRAY
				foreach _arr; _ghost {
					_result ,= SHIORI3FW.TranslateSystemChar(_ghost)
				}
				send_Ghost_Exists = JOIN(_result, ':')
				MenuCommentForce = "%(_title)を設定しました。"
			}
		}
		when 'send_Ghost_NotExists' {
			if (STRSTR(_r1, ':', 0) == -1) {
				send_Ghost_NotExists = SHIORI3FW.TranslateSystemChar(_r1)
				MenuCommentForce = "%(_title)を設定しました。"
			}
			else {
				_arr = SPLITEX(TOSTR(_r1), ':')
				_result = IARRAY
				foreach _arr; _ghost {
					_result ,= SHIORI3FW.TranslateSystemChar(_ghost)
				}
				send_Ghost_NotExists = JOIN(_result, ':')
				MenuCommentForce = "%(_title)を設定しました。"
			}
		}
		when 'send_Ghost_IsInAddressBook' {
			if (STRSTR(_r1, '/', 0) == -1) {
				send_Ghost_IsInAddressBook = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
			else {
				_result = IARRAY
				_arr0 = SPLITEX(_r1, ':')
				foreach _arr0; _curt {
					_arr1 = SPLITEX(_curt, '/')
					if (STRLEN(_arr1[0]) > 0 && STRLEN(_arr1[1]) > 0) {
						_result ,= SHIORI3FW.TranslateSystemChar(_arr1[0]) + '/' + SHIORI3FW.TranslateSystemChar(_arr1[1])
					}
				}
				send_Ghost_IsInAddressBook = JOIN(_result, ':')
				MenuCommentForce = "%(_title)を設定しました。"
				if (STRLEN(send_Ghost_IsInAddressBook) <= 0) {
					MenuCommentForce = "%(_title)を未設定に戻しました。"
				}
			}
		}
		when 'send_Ghost_Triggered' {
			if STRLEN(_r1) <= 0 {
				send_Ghost_Triggered = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
			elseif (STRSTR(_r1, '/', 0) == -1) {
				send_Ghost_Triggered = SHIORI3FW.TranslateSystemChar(_r1)
				MenuCommentForce = "%(_title)を設定しました。"
			}
			else {
				_arr = SPLITEX(_r1, '/')
				_result = (SHIORI3FW.TranslateSystemChar(_arr[0]), SHIORI3FW.TranslateSystemChar(_arr[1]))
				send_Ghost_Triggered = JOIN(_result, '/')
				MenuCommentForce = "%(_title)を設定しました。"
				if (STRLEN(send_Ghost_Triggered) <= 0) {
				MenuCommentForce = "%(_title)を未設定に戻しました。"
				}
			}
		}
		when 'send_Message_Run' {
			if (STRSTR(_r1, '/', 0) == -1) {
				send_Message_Run = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
			else {
				_result = IARRAY
				_arr = SPLITEX(_r1, '/')
				foreach _arr; _curt {
					_result ,= SHIORI3FW.TranslateSystemChar(_curt)
				}
				send_Message_Run = JOIN(_result, '/')
				MenuCommentForce = "%(_title)を設定しました。"
				if (STRLEN(send_Message_Run) <= 0) {
				MenuCommentForce = "%(_title)を未設定に戻しました。"
				}
			}
		}
		when 'send_Message_IsRun' {
			if (STRSTR(_r1, '/', 0) == -1) {
				send_Message_IsRun = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
			else {
				_result = IARRAY
				_arr0 = SPLITEX(_r1, ':')
				foreach _arr0; _curt {
					_arr1 = SPLITEX(_curt, '/')
					if (STRLEN(_arr1[0]) > 0 && STRLEN(_arr1[1]) > 0 && STRLEN(_arr1[2]) > 0) {
						_result ,= SHIORI3FW.TranslateSystemChar(_arr1[0]) + '/' + SHIORI3FW.TranslateSystemChar(_arr1[1]) + '/' + SHIORI3FW.TranslateSystemChar(_arr1[2])
					}
				}
				send_Message_IsRun = JOIN(_result, ':')
				MenuCommentForce = "%(_title)を設定しました。"
				if (STRLEN(send_Message_IsRun) <= 0) {
				MenuCommentForce = "%(_title)を未設定に戻しました。"
				}
			}
		}
		when 'send_Message_IsNotRun' {
			if (STRSTR(_r1, '/', 0) == -1) {
				send_Message_IsNotRun = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
			else {
				_result = IARRAY
				_arr0 = SPLITEX(_r1, ':')
				foreach _arr0; _curt {
					_arr1 = SPLITEX(_curt, '/')
					if (STRLEN(_arr1[0]) > 0 && STRLEN(_arr1[1]) > 0 && STRLEN(_arr1[2]) > 0) {
						_result ,= SHIORI3FW.TranslateSystemChar(_arr1[0]) + '/' + SHIORI3FW.TranslateSystemChar(_arr1[1]) + '/' + SHIORI3FW.TranslateSystemChar(_arr1[2])
					}
				}
				send_Message_IsNotRun = JOIN(_result, ':')
				MenuCommentForce = "%(_title)を設定しました。"
				if (STRLEN(send_Message_IsNotRun) <= 0) {
				MenuCommentForce = "%(_title)を未設定に戻しました。"
				}
			}
		}
		when 'send_Message_Read' {
			if (STRSTR(_r1, '/', 0) == -1) {
				send_Message_Read = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
			else {
				_result = IARRAY
				_arr = SPLITEX(_r1, '/')
				foreach _arr; _curt {
					_result ,= SHIORI3FW.TranslateSystemChar(_curt)
				}
				send_Message_Read = JOIN(_result, '/')
				MenuCommentForce = "%(_title)を設定しました。"
				if (STRLEN(send_Message_Read) <= 0) {
				MenuCommentForce = "%(_title)を未設定に戻しました。"
				}
			}
		}
		when 'send_Message_IsRead' {
			if (STRSTR(_r1, '/', 0) == -1) {
				send_Message_IsRead = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
			else {
				_result = IARRAY
				_arr0 = SPLITEX(_r1, ':')
				foreach _arr0; _curt {
					_arr1 = SPLITEX(_curt, '/')
					if (STRLEN(_arr1[0]) > 0 && STRLEN(_arr1[1]) > 0 && STRLEN(_arr1[2]) > 0) {
						_result ,= SHIORI3FW.TranslateSystemChar(_arr1[0]) + '/' + SHIORI3FW.TranslateSystemChar(_arr1[1]) + '/' + SHIORI3FW.TranslateSystemChar(_arr1[2])
					}
				}
				send_Message_IsRead = JOIN(_result, ':')
				MenuCommentForce = "%(_title)を設定しました。"
				if (STRLEN(send_Message_IsRead) <= 0) {
				MenuCommentForce = "%(_title)を未設定に戻しました。"
				}
			}
		}
		when 'send_Message_IsNotRead' {
			if (STRSTR(_r1, '/', 0) == -1) {
				send_Message_IsNotRead = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
			else {
				_result = IARRAY
				_arr0 = SPLITEX(_r1, ':')
				foreach _arr0; _curt {
					_arr1 = SPLITEX(_curt, '/')
					if (STRLEN(_arr1[0]) > 0 && STRLEN(_arr1[1]) > 0 && STRLEN(_arr1[2]) > 0) {
						_result ,= SHIORI3FW.TranslateSystemChar(_arr1[0]) + '/' + SHIORI3FW.TranslateSystemChar(_arr1[1]) + '/' + SHIORI3FW.TranslateSystemChar(_arr1[2])
					}
				}
				send_Message_IsNotRead = JOIN(_result, ':')
				MenuCommentForce = "%(_title)を設定しました。"
				if (STRLEN(send_Message_IsNotRead) <= 0) {
				MenuCommentForce = "%(_title)を未設定に戻しました。"
				}
			}
		}
		when 'send_Ugm_IsRunning' {
			if _r1=='0' || _r1=='1' {
				send_Ugm_IsRunning = TOINT(_r1)
				MenuCommentForce = "%(_title)を設定しました。"
			}
			else {
				send_Ugm_IsRunning = ''
				MenuCommentForce = "%(_title)を未設定に戻しました。"
			}
		}
		others {
			_r1 = SHIORI3FW.TranslateSystemChar(_r1)
			_r3 = SHIORI3FW.TranslateSystemChar(reference[3])
			LETTONAME(_r3, _r1)
		}
	}

	if (STRSTR(reference[3], 'send_Time_', 0) == 0 || STRSTR(reference[3], 'send_Ghost_', 0) == 0 || STRSTR(reference[3], 'send_Message_', 0) == 0 || STRSTR(reference[3], 'send_Ugm_', 0) == 0) {
		Menu_Send('cond')
	}
	else {
		Menu_Send
	}
}

Menu_Send_Edit_EventReference
{
	_selected = send_EventReference[TOINT(reference[2])]
	_script = '\![close,inputbox,__SYSTEM_ALL_INPUT__]\![open,inputbox,Menu_Send_Edit_Entered_EventReference,0'
	if (STRLEN(_selected) > 0) {
		_script += ',--text="'
		_script += _selected
		_script += '"'
	}
	_script += ',--reference='
	_script += reference[2]
	_script += ']'

	_script += '\_a[EventReference]イベントリファレンス\_aを入力してください。\n[150]空欄で決定すると、未設定に戻ります。'

	MenuCommentForce = _script
	Menu_Send('reference')
}

Menu_Send_Edit_Entered_EventReference
{
	if (STRLEN(reference[1]) > 0) {
		_entered = reference[1]
		_entered = SHIORI3FW.TranslateSystemChar(_entered)
		_entered = SHIORI3FW.EscapeAllTags(_entered)
		_count = TOINT(reference[3])
		send_EventReference[_count] = _entered
	}
	else {
		_count = TOINT(reference[3])
		send_EventReference[_count] = IARRAY
	}

	Menu_Send('reference')
}

//------------------------------------------------------------------------------
// OnUkagakaGhostMessenger_Cancel系列
//------------------------------------------------------------------------------

Menu_Cancel
{
	_BreadCrumbs = ('Menu|メニュー', 'Menu_UgmTools|UGM:作成&試行', 'Menu_Cancel|現在地')
	_talk = ''

	_talk += '\![close,inputbox,__SYSTEM_ALL_INPUT__]'
	_talk += '\![quicksection,1]'
	_talk += '\0\_n'
	_talk += "%(CloseMenuButton)"
	_talk += "%(MenuBreadCrumbs(JOIN(_BreadCrumbs,',')))\n[150]"
	_talk += "%(MenuHr('\_a[Cancel]メッセージの取り消し\_a'))\n"
	_talk += "%(MenuItem(1,'以下の内容で取り消す','Menu_Cancel_Exec'))\n"
	_talk += "%(MenuItem(1,'スクリプトをコピーする','Menu_CopyScript','Cancel'))\n[150]"
	_talk += '\f[bold,1]送信者識別子\f[bold,0]\n'
	_talk += "%(MenuItem(1,GenerateTextLabel(cancel_SenderId),'Menu_Cancel_Edit','cancel_SenderId'))"
	_talk += '\_n'
	_talk += "\1\![quicksection,1]%(MenuComment(OnExplanationCall('Cancel')))"

	_talk
}

Menu_Cancel_Exec
{
	_script = MakeScript_Cancel
	MenuCommentForce = '取り消すよ～' + _script
	Menu_Cancel
}

Menu_Cancel_Edit
{
	_r2 = EVAL(reference[2])
	_script = '\![close,inputbox,__SYSTEM_ALL_INPUT__]\![open,inputbox,Menu_Cancel_Edit_Entered,0'
	if (STRLEN(_r2) > 0) {
		_script += ',--text="'
		_script += _r2
		_script += '"'
	}
	_script += ',--reference='
	_script += reference[2]
	_script += ']'
	MenuCommentForce = _script
	MenuCommentForce += '送信者識別子を入力してください。'
	MenuCommentForce += '\n[150]空欄で決定すると、未設定に戻ります。'
	Menu_Cancel
}

Menu_Cancel_Edit_tooltip
{
	if ISEVALUABLE(reference[3]) == 1 {
		EVAL(reference[3])
	}
}

Menu_Cancel_Edit_Entered
{
	_entered = reference[1]
	_entered = SHIORI3FW.TranslateSystemChar(_entered)
	_entered = SHIORI3FW.EscapeAllTags(_entered)
	LETTONAME(reference[3], _entered)
	Menu_Cancel
}

//------------------------------------------------------------------------------
// OnUkagakaGhostMessenger_Trigger系列
//------------------------------------------------------------------------------

Menu_Trigger
{
	_BreadCrumbs = ('Menu|メニュー', 'Menu_UgmTools|UGM:作成&試行', 'Menu_Trigger|ここ')
	_talk = ''

	_talk += '\![close,inputbox,__SYSTEM_ALL_INPUT__]'
	_talk += '\![quicksection,1]'
	_talk += '\0\_n'
	_talk += "%(CloseMenuButton)"
	_talk += "%(MenuBreadCrumbs(JOIN(_BreadCrumbs,',')))\n[150]"
	_talk += "%(MenuHr('\_a[Trigger]メッセージのトリガー\_a'))\n"
	_talk += "%(MenuItem(1,'以下の内容で実行する','Menu_Trigger_Exec'))\n"
	_talk += "%(MenuItem(1,'スクリプトをコピーする','Menu_CopyScript','Trigger'))\n[150]"
	_talk += '\f[bold,1]イベント識別子\f[bold,0]\n'
	_talk += "%(MenuItem(1,GenerateTextLabel(trigger_TriggerId),'Menu_Trigger_Edit','trigger_TriggerId'))\n[150]"
	_talk += '\f[bold,1]対象ゴースト名\f[bold,0]\n'
	_talk += "%(MenuItem(1,GenerateTextLabel(trigger_TargerSender),'Menu_Trigger_Edit','trigger_TargerSender'))\n[150]"
	_talk += '\f[bold,1]対象の送信者識別子\f[bold,0]\n'
	_talk += "%(MenuItem(1,GenerateTextLabel(trigger_TargetSenderId),'Menu_Trigger_Edit','trigger_TargetSenderId'))"
	_talk += '\_n'
	_talk += "\1\![quicksection,1]%(MenuComment(OnExplanationCall('Trigger')))"

	_talk
}

Menu_Trigger_Exec
{
	_script = MakeScript_Trigger
	MenuCommentForce = 'トリガーを引きました。' + _script
	Menu_Trigger
}

Menu_Trigger_Edit
{
	_r2 = EVAL(reference[2])
	_script = '\![close,inputbox,__SYSTEM_ALL_INPUT__]\![open,inputbox,Menu_Trigger_Edit_Entered,0'
	if (STRLEN(_r2) > 0) {
		_script += ',--text="'
		_script += _r2
		_script += '"'
	}
	_script += ',--reference='
	_script += reference[2]
	_script += ']'
	MenuCommentForce = _script

	case reference[2] {
		when 'trigger_TriggerId' {
			MenuCommentForce += 'イベントを識別するための文字列を\n入力してください。'
		}
		when 'trigger_TargerSender' {
			MenuCommentForce += '対象のゴースト名を入力してください。'
			MenuCommentForce += '\n[150]省略すると、全員に送られます。'
			MenuCommentForce += '\n[150]空欄で決定すると、未設定に戻ります。'
		}
		when 'trigger_TargetSenderId' {
			MenuCommentForce += '対象の送信者識別子を入力してください。'
			MenuCommentForce += '\n[150]省略すると、そのゴースト内の全員に送られます。'
			MenuCommentForce += '\n[150]ゴースト名も省略されていたら、\n対象は全ての全員になります。'
			MenuCommentForce += '\n[150]空欄で決定すると、未設定に戻ります。'
		}
	}
	Menu_Trigger
}

Menu_Trigger_Edit_tooltip
{
	if ISEVALUABLE(reference[2]) == 1 {
		EVAL(reference[2])
	}
}

Menu_Trigger_Edit_Entered
{
	_entered = reference[1]
	_entered = SHIORI3FW.TranslateSystemChar(_entered)
	_entered = SHIORI3FW.EscapeAllTags(_entered)
	LETTONAME(reference[3], _entered)
	Menu_Trigger
}
